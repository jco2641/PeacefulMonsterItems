import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.

version = project.mod_version
group = project.group_name
archivesBaseName = "[${project.minecraft_version}]${project.group_name}"

sourceCompatibility = targetCompatibility = "1.8"
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = project.minecraft_version + '-' + project.forge_version
    runDir = "run"
    mappings = project.mappings_version

    replace '@MOD_VERSION@', project.mod_version
    replace '@JSON_URL@', project.forgeupdate_url

    replaceIn 'Reference.java'
}

dependencies {
}

processResources
{
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        expand ([
                'mod_version':project.mod_version,
                'minecraft_version':project.minecraft_version
        ])
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task updateJson {
    def fileName = new File('forgeupdate/forgeupdate.json')
    def fujson = new JsonSlurper().parseText(fileName.text)

    doLast {
        //update update-URL
        fujson['homepage'] = project.forgeupdate_url

        //update promoted versions
        def lateststr = project.minecraft_version + '-latest'
        fujson['promos'][lateststr] = project.mod_version.toString()
        def recomstr = project.minecraft_version + '-recommended'
        fujson['promos'][recomstr] = project.mod_version.toString()

        def jsOut = JsonOutput.toJson(fujson)
        fileName.write(JsonOutput.prettyPrint(jsOut))
    }
}

build.finalizedBy updateJson

jar {
    classifier = "universal"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.java
    classifier = 'deobf'
}

sourceJar {
    classifier = 'src'
}

artifacts {
    archives deobfJar
    archives sourceJar
}

idea {
    module {
        inheritOutputDirs = true
    }
}
